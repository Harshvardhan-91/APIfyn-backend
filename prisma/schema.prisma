generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plan {
  id             String        @id @default(cuid())
  name           String        @unique
  description    String
  monthlyPrice   Float
  yearlyPrice    Float
  features       String[]
  apiCallsLimit  Int
  workflowsLimit Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("plans")
}

model User {
  id            String              @id @default(cuid())
  firebaseUid   String              @unique
  email         String              @unique
  displayName   String?
  photoURL      String?
  emailVerified Boolean             @default(false)
  firstName     String?
  lastName      String?
  company       String?
  jobTitle      String?
  apiCallsUsed  Int                 @default(0)
  workflowsUsed Int                 @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  lastLoginAt   DateTime?
  integrations  Integration[]
  executions    WorkflowExecution[]
  workflows     Workflow[]

  @@map("users")
}

model Integration {
  id             String          @id @default(cuid())
  name           String          // e.g. "My GitHub Repo" or "Slack Workspace"
  type           IntegrationType // GITHUB / SLACK
  config         Json            // stores repo/channel IDs, webhook secret etc.
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workflow {
  id             String              @id @default(cuid())
  name           String
  description    String?
  triggerType    TriggerType         // WEBHOOK for GitHub push
  triggerConfig  Json                // e.g. repo, eventType (push, PR)
  actionConfig   Json                // e.g. Slack channel, message template
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         String
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions     WorkflowExecution[]
}

model WorkflowExecution {
  id            String          @id @default(cuid())
  status        ExecutionStatus
  startedAt     DateTime        @default(now())
  completedAt   DateTime?
  inputData     Json?
  outputData    Json?
  errorMessage  String?
  workflowId    String
  userId        String
  workflow      Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TriggerType {
  WEBHOOK
  MANUAL
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

enum IntegrationType {
  GITHUB
  SLACK
}