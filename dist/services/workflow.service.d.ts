export declare class WorkflowService {
    static createWorkflow(userId: string, workflowData: any): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        description: string | null;
        isActive: boolean;
        definition: import("@prisma/client/runtime/library").JsonValue;
        isPublic: boolean;
        category: string | null;
        tags: string[];
        version: number;
        triggerType: import(".prisma/client").$Enums.TriggerType;
        triggerConfig: import("@prisma/client/runtime/library").JsonValue | null;
        timeout: number;
        retryAttempts: number;
        totalRuns: number;
        successfulRuns: number;
        failedRuns: number;
        lastExecutedAt: Date | null;
        avgExecutionTime: number | null;
    }>;
    static getUserWorkflows(userId: string): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        description: string | null;
        isActive: boolean;
        definition: import("@prisma/client/runtime/library").JsonValue;
        isPublic: boolean;
        category: string | null;
        tags: string[];
        version: number;
        triggerType: import(".prisma/client").$Enums.TriggerType;
        triggerConfig: import("@prisma/client/runtime/library").JsonValue | null;
        timeout: number;
        retryAttempts: number;
        totalRuns: number;
        successfulRuns: number;
        failedRuns: number;
        lastExecutedAt: Date | null;
        avgExecutionTime: number | null;
    }[]>;
    static getWorkflow(id: string): Promise<({
        executions: {
            id: string;
            createdAt: Date;
            status: import(".prisma/client").$Enums.ExecutionStatus;
            userId: string;
            startedAt: Date;
            completedAt: Date | null;
            duration: number | null;
            inputData: import("@prisma/client/runtime/library").JsonValue | null;
            outputData: import("@prisma/client/runtime/library").JsonValue | null;
            errorMessage: string | null;
            errorStack: string | null;
            stepsExecuted: import("@prisma/client/runtime/library").JsonValue[];
            currentStep: number | null;
            totalSteps: number | null;
            triggerSource: string | null;
            executionMode: import(".prisma/client").$Enums.ExecutionMode;
            workflowId: string;
        }[];
    } & {
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        description: string | null;
        isActive: boolean;
        definition: import("@prisma/client/runtime/library").JsonValue;
        isPublic: boolean;
        category: string | null;
        tags: string[];
        version: number;
        triggerType: import(".prisma/client").$Enums.TriggerType;
        triggerConfig: import("@prisma/client/runtime/library").JsonValue | null;
        timeout: number;
        retryAttempts: number;
        totalRuns: number;
        successfulRuns: number;
        failedRuns: number;
        lastExecutedAt: Date | null;
        avgExecutionTime: number | null;
    }) | null>;
    static updateWorkflow(id: string, userId: string, data: any): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        description: string | null;
        isActive: boolean;
        definition: import("@prisma/client/runtime/library").JsonValue;
        isPublic: boolean;
        category: string | null;
        tags: string[];
        version: number;
        triggerType: import(".prisma/client").$Enums.TriggerType;
        triggerConfig: import("@prisma/client/runtime/library").JsonValue | null;
        timeout: number;
        retryAttempts: number;
        totalRuns: number;
        successfulRuns: number;
        failedRuns: number;
        lastExecutedAt: Date | null;
        avgExecutionTime: number | null;
    }>;
    static deleteWorkflow(id: string, userId: string): Promise<{
        success: boolean;
    }>;
    static executeWorkflow(workflowId: string, triggerData?: any, executionMode?: 'NORMAL' | 'TEST'): Promise<any>;
    static getWorkflowTemplates(category?: string, search?: string): Promise<{
        name: string;
        user: {
            email: string;
            displayName: string | null;
        };
        id: string;
        createdAt: Date;
        description: string | null;
        definition: import("@prisma/client/runtime/library").JsonValue;
        category: string | null;
        tags: string[];
        totalRuns: number;
    }[]>;
    static cloneWorkflowTemplate(userId: string, templateId: string, customName?: string): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        description: string | null;
        isActive: boolean;
        definition: import("@prisma/client/runtime/library").JsonValue;
        isPublic: boolean;
        category: string | null;
        tags: string[];
        version: number;
        triggerType: import(".prisma/client").$Enums.TriggerType;
        triggerConfig: import("@prisma/client/runtime/library").JsonValue | null;
        timeout: number;
        retryAttempts: number;
        totalRuns: number;
        successfulRuns: number;
        failedRuns: number;
        lastExecutedAt: Date | null;
        avgExecutionTime: number | null;
    }>;
}
//# sourceMappingURL=workflow.service.d.ts.map